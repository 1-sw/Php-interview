======================================
https://qna.habr.com/q/448727
======================================
Джуниор джуниору рознь и в разных конторах разные требования, но в идеале вам нужно знать и уметь:
- PHPStorm, PSR, чистый самодокументированный код
- Composer, автозагрузка классов
- Базовое понимание ООП, статический и динамический контекст, умение применять на практике
- Git, работа с ветками, мерджи, разруливание конфликтов
- Индексы в БД, какие, для чего нужны, составные индексы, какие недостатки имеют
- Джоины в БД, подзапросы, группировка
- Внешние ключи в БД, минимум по нормализации данных
- JS, jQuery, HTML, CSS, хоть минимально
---------------------------------
Будут спрашивать много о ООП, концепции, магические методы, трейты, что как работает при разных ситуациях, модифкаторы доступа, что нового в PHP7, интерфейсы, типы данных, циклы...
О каждом вышеперечисленном надо рассказывать развернуто, то есть например, сказать что бы создать абстрактный класс нужно перед class написать abstract этого не достаточно, нужно рассказать зачем он нужен, чем отличается, когда используются, нюансы всякие, и так обо всём что спрашивают.
Так же о MySQL, а именно CRUD, связывание таблиц, индексы, внешние ключи, транзакции, сортировки, группировки...об этом всём тоже нужно рассказать развернуто.
Так же будут спрашивать о работе интернета, там например про http протокол, https, попросят начертить схему работы клиент-сервер ну и прокомментировать соответственно, схема должна быть максимально полной (клиет, сервер, интерпретатор php (или что то другое смотря кем устраиваетесь), mysql, dns).
По всему вышеперечисленному зададут какие то задачки, что то решить на php, написать какую-то разметку, применить к ней css ну и далее в том же духе.
Такие же базовые вещи будут спрашивать о html, css возможно js.
------------------
Разговор не должен состоять короткий вопрос - короткий ответ, он должен быть короткий - вопрос развернутый рассказ, то есть, если вас спросили о трейтах, сказать что да, такая приколюха есть в php и она создаётся ключевым словом trait и сидеть глазеть на собеседника ожидая следующего вопроса не достаточно, нужно говорить о множественном наследовании, о конфликтах которые могут возникнут, способах их решения, когда применяется и так далее, иными словами информацию с вас не должны вытягивать силой, самим нужно рассказывать, чем больше тем лучше.
-------------------
1. Написать простейшее API для формы обратной связи. От фронта через POST приходят поля email и text. Ответ в JSON, булев параметр success. От руки, прямо на доске. Если через php_filter завалидирует поля, жирный плюс.
2. Зачем нужены интерфейсы?
3. Что делать, если отображаются крякозябры на экране вместо сайта?
4. Есть база, в ней 2 таблицы: пользователи и фотографии, напишите запрос, который будет выводить список пользователей с их первой (самой старой) и последней (самой новой) фотографиями.
5. Работали ли вы с git ранее?
------------------
Вопрос: что такое REST?
Задание на Yii2 недавно присылали тестовое - создать полноценный REST API с тестированием Codeception если с RBAC-ролями сделаешь, то будет плюсом.
Ну классику вам бы погуглить - "чем отличается абстрактный класс от интерфейса" и если на junior'a то рекурсии можно пописать ))