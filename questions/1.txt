----------------------------------------------------------
1. Принципиальное различие скриптовых и ООП языков

Скриптовый язык программирования: 
	Язык программирования преимущественно процедурного стиля
    для написания сценариев с целью расширения возмоэностей командной оболочки,
    ос или любого другого интерфейса

ООП язык п.:
	Обьектно-ориентированный я.п. внутреннее взаимодействие которого
	полностью или частично происходит между классами и обьектами

Четких границ между ними нет, как сценарный язык может быть
расширен для поддержки ООП (например как PHP), так и ООП язык
может поддерживать сценарии любого типа (Python)
----------------------------------------------------------
2. Принципы ООП

Абстракция - придание обьекту характеристик, которые будут отличать 
его от других обьектов.

Наследование - механизм позволяющий создание нового класса на основе
родителя с заимствованием свойст и функциональности.

Инкпасулиця - механизм сокрытия реализации используемых програмных 
компонентов с целью защиты его от неправильного использования, а также
для удобства. (Это реализуется с помощью модификаторов доступа)

Полиморфизм - один интерфейс, множество реализаций.
Если быть точнее, возможность изменять неаследуемый
интерфейс. Благодаря полиморфизму повышается кооф. 
повторного использования кода. 
----------------------------------------------------------
3. Что такое MVC и зачем это нужно.

Архитектурный паттерн проектирования, который предпологоает 
разбиение кода на 4 основных компонента: 

Модель - включает в себя данные и методы для работы с ними,
а также их обработки

Вид - отображает данные. т.к. в зависимости от состояния
системы данные должны представляться по разному

Контроллер - связующее между пользователем и системой, использует
Модель и Вид для формирования правильной реакции.

Роутер - необязательный компонент, чаще встречающийся 
в вэб-интерфейсах, цель которого маршрутизировать страницы
по ссылкам, выглядит это так: урл http://example и роутер
проверяет, корректный ли запрос, если да - зовет контроллер.
----------------------------------------------------------
4. Что такое TDD
Разработка через тестирование - (Test-Driven Development)
Некоторые считают, что это методология тестирования, но прежде
всего это методика разработки и проектирования.
Цыкл при разработке через тестирование:

Пишем тест <-+
   |         |
 прошел?----да
   |
  нет
   |
изменяем код <---------+
   |                   |
все тесты прошли ? --нет
   |
   да
   |
  чистка кода
----------------------------------------------------------
5. Настройка http-серверов

Веб-сервер, это сервер получающий http(s) запрос от клиента
(обычно браузеры) для получения некоторых ресурсов, такие как
файлы, html-страницы и другие.

Настройка может производиться как через изменение конфигов, так и
с использованием графических оболочек/сборок (XAAMP,WAMP и другие)

Наиболее распространенные веб-сервера nginx и Apache.
Главное их различие, что nginx используют на Unix подобных, когда как
Apache кросс-платформен.

----------------------------------------------------------
6. Балансировка нагрузки на сервера приложений (haproxy)
Аббревиатура - High Availablility Proxy.
Програмное обеспечение для распределения и оптимизации 
нагрузки на сервера.
----------------------------------------------------------

блокировочные и версионные СУБД
    индексы (зачем нужны, плюсы и минусы)
    репликация
    шардинг (партиционирование)
    типичные bottle necks
  PostgreSql
    pgBouncer — что это и зачем нужно
    системы репликации
    PgQ (другие очереди)
    синхронные и асинхронные операции
==================================================================================================
  Система контроля версий
    зачем нужна
    какими пользовались
  Git (если есть опыт)
    как перенести изменени из одной ветку в другую (2 способа)
    зачем нужна команда git rebase
    разница между git и svn (если есть)
  Система тикетов и организация задач
    зачем нужна
    какими пользовались
    как была организована работа в команде
    методы разрешения конфликтов
==================================================================================================
  какие ресурсы читаются и как часто
  какие задачи интересуют
  что интересно по жизни, какие хобби
  есть свой блог
  какие три последние книги прочитал
  что сделал в своей жизни такого, чем можешь гордиться    
==================================================================================================
Чем интерфейс отличается от абстрактного класса?
Назовите 5 различных функций для работы с массивами.
Какими библиотеками и фреймворками пользовались?
В чем разница между 4 и 5 версиями? Какие нововведения были в версии 5.3/5.4?
Что такое PEAR и PECL?
==================================================================================================
Знакомы ли с паттернами проектирования? Какие использовали в работе?
Напишите небольшую реализацию паттерна Singleton.
Что такое MVC и какие преимущества его использования? Какие ещё знаете архитектурные паттерны?
Знакомы ли с ORM, ActiveRecord?
==================================================================================================
Написать функцию для возведения числа в заданную степень с помощью рекурсии.
function Recursion($number, $grade)
{
	for($iter,iter)
}
Что выведет на экран скрипт в результате?
class Foo {
        public $test = NULL;
}
 
$foo = new Foo;
$foo->test = '12345678';
 
$bar = $foo;
$bar->test = '87654321';
 
echo $foo->test;
Что выведет код и почему?
$i = 10;
$i += ++$i + $i + $i++; 
print $i;
MySQL

Задача: основная таблица + справочник. Вывести объединение. Написать SQL запрос. Чем отличаются INNER и OUTER JOIN-ы.
Задача: вывести список дубликатов значений поля и их количество. Написать SQL запрос.
В чем заключается оптимизация БД, и в частности MySQL.
Основные отличия MyISAM и InnoDB. Преимущества и недостатки.
Проектирование БД. Нормальные формы.
Client-side
==================================================================================================
Назвать два распространённых подхода к вёрстки. Назовите их, а также объясните, какой лучше и почему?
В чем разница между HTML и xHTML?
Приходилось работать с AJAX, XML, JSON?
C какими JavaScript-фреймворками приходилось работать?
В чем преимущество JavaScript-фреймворков перед чистым JavaScript?
Назовите распространенные методы клиентской оптимизации.
Дополнительные вопросы
==================================================================================================
Что такое Apache и mod_rewrite?
C каким серверным ПО приходилось работать?
Знакомы ли c SCM системами - Git, Mercurial, SVN, etc?
Есть высоко-нагруженный сайт на котором начались проблемы с производительностью, как делать оптимизацию? С чего начать?
Какие Вы знаете технологии повышения производительности PHP?
Логика этих вопросов в том, чтобы понять максимальный уровень знаний кандидата. Если человек отвечал на все вопросы, дальше уже шли вопросы из головы. Человек уверенно заявляет, что использовал Builder и Strategy - отлично, прошу рассказать о них. Рассказывает - ещё лучше, задаю вопрос про паттерн Hydrator. Уверенно размышляет об MVC - "Что Вы знаете о сигнальной архитектуре?". Любимый вопрос, для самый умных - "Если приложение будет представлять из себя только один файл следующего содержания, можно ли считать это MVC?". Удивительно, сколько людей начинали паниковать и нести ахинею, когда выдели такую реализацию.

$config = [
    'db' => [
        'host' => '127.0.0.1',
        'user' => 'root',
        'pass' => '',
        'use'  => 'database',
    ]
];


function model_posts($id = NULL) {
    $sql = "SELECT * FROM posts WHERE id = ?";
    return db_query($sql, [$id]);
}

function controller_post($id = NULL) {
    if ($model = model_posts($id)) {
        return view('../templates/post.php', [
            'post' => $model
        ]);
    }

    return false;
}

function view($template, Array $variables = array()) {
    ob_start();
    extract($variables);
    include $template;
    return ob_get_clean();
}

function db_query($sql, Array $params = array()) {
    global $config;
    $db = new PDO($config['db']['dsn'], $config['db']['user'], $config['db']['passwd']);
    $query = $db->prepare($sql);
    $query->execute($params);
    return $query->fetchAll();
}

function dispatch() {
    $result = FALSE;
    $uri = $_SERVER['REQUEST_URI'];

    if (preg_match('#^/post/(?P\d+)/?$#ui', $uri, $matches)) {
        $result = controller_post($matches['id']);
    }

    // ...

    if ($result) {
        echo $result;
    } else {
        die('Error');
    }
}

dispatch();
==================================================================================================
Если по опыту работы кандидата было видно, что с интерфейсами он знаком и с рекурсией уже сталкивался не раз, чтобы не мучать его общими вопросами, я предлагал провести беседу в формате "Что будет, если …?", где кандидат пытался решить смоделированную мной ситуацию, а я выступаю в роли компилятора его решений. Выглядело это так:

- Допустим, Вы попали в ситуацию - Вас взяли на работу, задача - дорабатывать и развивать уже готовый проект. Через неделю Вашего знакомства с проектом, маркетинговый отдел запустил довольно успешную кампанию и время загрузки сайта за сутки увеличилось с 0.5c до 15с. Как вы будете решать проблему?

- Посмотрю на вывод SHOW PROCESSLIST; в консоли MySQL на кол-во и время выполнения запросов.

- Хорошо. Допустим, там постоянно висит 2-3 различных запроса с большим временем выполнения. Ваши действия?

- Оптимизация базы, индексы, объединения.

- Ок, а если много различных запросов с небольшим временем выполнения?

- Необходимо использовать кэширование запросов

- Ок, допилили кэширование, но проблема все же осталась

- Некорректная работа кэширующего механизма?

- Допустим. Давайте немного скорректируем условия - вы открываете консоль MySQL и видите там обычное кол-во запросов. В чем ещё может быть проблема?

И ещё 40 минут в таком же духе. Мои любимые темы - тестирование запросов на малых объемах данных, когда на production данных значительно больше, вложенные запросы страниц, подтягивание внешнего источника (напр. RSS фида) в основном потоке, когда внешний источник упал и т.п. В этом диалоге также есть не-явная суть - проверить мышление кандидата, узнать где и как он ищет решение проблем ("я не знаю, погуглю" - без иронии, один из лучших ответов), может ли он допустить проблему в стороннем системном компоненте и готов ли разобраться с этой проблемой, как хорошо он знает механику работы web-приложений, которая лежит за рамками серверной части.
questionsPHP1.txt
==================================================================================================
Расскажите о нововведениях в PHP 5.6. Даже если не всегда получается использовать новые версии PHP, их знание является большим плюсом. Следом идет вопрос о том что значит следующий синтаксис: function(...$args)
Типы данных в PHP, очень стандартный вопрос, но много кто не знает, что NULL это отдельный тип, а еще есть такой тип resource. Еще для понимания приведения типов в PHP спрашиваем чему будет равно 10 + "10a" + "a10"
Какими SPL классами вы пользуетесь? Мало кто вообще знает, что такое SPL.
Какие структуры данных вы знаете? Разница стэка и очереди.
Естественно, куда же без ООП. Шаблоны проектирования, все знают Singleton, но его минусы перечислить могут не все.
Особенности ООП в PHP. Можно ли сделать множестенное наследование в PHP, что такое traits? Что такое позднее статическое связывание?
==================================================================================================
Знаете ли вы, что такое SOLID? Объясните.
==================================================================================================
Немного вопросов о функциях в PHP. Функции сортировки массивов, отличие include от require.
Далее спрашиваем об использовании фреймворков. Идут пару вопросов о тех фреймворках, с которыми я имел дело, в зависимости от ответа. Что такое DI, объясните MVC, что такое fat controller.
Дальше идет целый пласт вопросов о базах данных, о знании SQL. Какие уровни изоляции транзакций вы знаете? В каких случаях стоит использовать составной индекс, в каких - нет.
Имеем таблицу employees, в ней name, department_id, salary. Просим написать запрос: вывести список сотрудников, получающих максимальную зарплату в своём отделе. Второй запрос: вывести список отделов, содержащих как минимум 5 сотрудников.
==================================================================================================
Большим плюсом будет знание конфигурации БД, репликации, EXPLAIN.
Пару вопросов про безопасность, как защититься от CSRF, от SQL-Injection. Как вы сохраняете пароли в своих проектах.
Можно задавать много вопросов про смежные технологии. Например, если человек использовал Symfony, то пару вопросов про mapping в Doctrine. Если использовал Memcache, то с какими проблемами сталкивался.
Какие схемы использовались кандидатом для раскладки кода. CI? Composer?
Конечно же тесты: функциональные, стресс, юнит.
Системы контроля версий. Обычно так: с SVN работал? Да. Что такое cherypick? С Git работал? Да. Чем отличается rebase от merge?
Пару базовых вопросов по UNIX. Как найти файл с определенной подстрокой в директории со вложенностями.