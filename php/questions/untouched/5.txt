===========================================
https://qna.habr.com/q/492092
===========================================
Самое первое и самое главное:
Открыть Google.com и держать его открытым, когда появиться вопрос - учиться делать запросы в гугл поиск правильно, поверь - это важно :_).
Открыть Youtube , там много всяких уроков по PHP , мой совет - PHP Start теория и практика (бесплатный курс Виктора Зинченко).
Наверное самый важный пункт - практика, попробуйте написать свою авторизацию, свой блог что ли с нуля.
Ознакомиться с курсами по безопасности и оптимизации PHP-приложения, хотя бы базовый уровень, опять тут же понять что такое ООП (гугл в помощь).
Не менее важный пункт, уже не к теме по PHP, но все же - научиться работать на Linux, поднимать веб-сервер, понимать конфигурацию. Это все на практике в связке опять же с гуглом, с теорией.
------------------------------------
Если разделить лично мое развитие на стадии, то
1. Изучение html, css
2. Попытки реализовать какие-то азы(например отправка формы) на php по пример на сайтах
3. JS - что такое jquery, ajax, как этой хероборой вообще пользоваться и зачем она
4. Понимание основ HTML и CSS, JS - возможность верстать небольшие сайты
5. Знакомство с ООП PHP, получение средних знаний в функционале PHP, MySQL
6. Получение среднего уровня знаний в верстке, переход к MVC в PHP
7. Изучение фреймворков PHP
8. Высокие знания HTML/CSS/JS/PHP
9. Изучение технологий Node,JS/MongoDB/Rails/прочего
------------------------------------
Реализуй какой-нибудь проект на каком-нибудь фреймворке. Например интернет-магазин на ларавель. Найди какой-нибудь видеокурс, где автор урок за уроком делает один и тот же проект и повторяй за ним, тупо переписывая код с экрана. Можешь сделать так несколько проектов во нескольким курсам разных авторов. А вот фреймворк лучше не менять, это тебя только запутает. После 3-4 проектов по урокам попробуй наваять похожий проект самостоятельно.
-------------------------------------------------
Почему таблица не может иметь два кластеризованных индекса?
Потому что кластеризированный индекс и есть таблица.
Это не отдельная сущность, как другие индексы, а таблица с отсоритированными
строками (в порялке возростания или убывания)
-------------------------------------------------
Если кластеризованная таблица даёт множество преимуществ, то зачем использовать кучу?
-------------------------------------------------
Как изменить установленное по умолчанию значение коэффициента заполнения индекса?
Можно ли создать кластеризованный индекс на столбце, содержащем дубликаты?
-------------------------------------------------
Как хранится таблица, если не был создан кластеризованный индекс?
-------------------------------------------------
Какая взаимосвязь между ограничениями на уникальность значения и первичным ключом с индексами таблицы?
-------------------------------------------------
Почему в SQL Server кластеризованные и некластеризованные индексы называются сбалансированным деревом?
Как вообще индекс может улучшить производительность запросов, если приходится переходить по всем этим индексным узлам?
Если индексы настолько замечательны, то почему бы просто не создать их на каждый столбец?
Обязательно ли создавать кластеризованный индекс на столбце с первичным ключом?
А что если проиндексировать представление, то это по-прежнему будет представление?
Зачем использовать покрывающий индекс взамен составного индекса?
Имеет ли значение количество дубликатов в ключевом столбце?
Можно ли создать некластеризованный индекс только для определенного подмножества данных ключевого столбца?
